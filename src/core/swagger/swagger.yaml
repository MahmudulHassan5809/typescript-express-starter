openapi: 3.0.0
info:
    title: Express API with Swagger
    version: 1.0.0
    description: Production ready starter template with Express, Typescript, TypeORM, Tsyringe  and documented with Swagger
servers:
    - url: http://localhost:8080

paths:
    /api/v1/auth/login/:
        post:
            tags:
                - auth
            summary: User login
            requestBody:
                description: User login credentials
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    example: admin@example.com
                                password:
                                    type: string
                                    example: admin123
            responses:
                200:
                    description: Successful login
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    accessToken:
                                        type: string
                                        description: JWT access token
                                    refreshToken:
                                        type: string
                                        description: JWT refresh token
                400:
                    description: Invalid credentials

    /api/v1/auth/register/:
        post:
            tags:
                - auth
            summary: Register a new user
            requestBody:
                description: User registration details
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UserRegister"
            responses:
                201:
                    description: User successfully registered
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    id:
                                        type: number
                                        description: The ID of the newly created user
                400:
                    description: Invalid input or user already exists

    /api/v1/users/:
        get:
            tags:
                - admin-users
            summary: Retrieve a list of users
            security:
                - bearerAuth: []
            responses:
                200:
                    description: A list of users.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/User"
                401:
                    description: Unauthorized

components:
    schemas:
        User:
            type: object
            properties:
                id:
                    type: number
                    description: The auto-generated id of the user
                firstName:
                    type: string
                    description: The first name of the user
                lastName:
                    type: string
                    description: The last name of the user
                email:
                    type: string
                    description: The email of the user
                password:
                    type: string
                    description: The password of the user
                is_staff:
                    type: boolean
                    description: Whether the user is a staff member
                is_superuser:
                    type: boolean
                    description: Whether the user is a superuser
        UserRegister:
            type: object
            properties:
                firstName:
                    type: string
                    description: The first name of the user
                lastName:
                    type: string
                    description: The last name of the user
                email:
                    type: string
                    description: The email of the user
                password:
                    type: string
                    description: The password of the user
    securitySchemes:
        bearerAuth:
            type: http
            scheme: bearer
            bearerFormat: JWT
